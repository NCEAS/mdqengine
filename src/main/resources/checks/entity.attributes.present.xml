<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://nceas.ucsb.edu/mdqe ../schemas/schema1.xsd">
	<id>check.entity.attributes.present.1</id>
	<name>Check that an each entity has attributes.</name>
	<description>Check that each data entity attributes.</description>
	<type>interpretation</type>
	<level>REQUIRED</level>
	<environment>rscript</environment>
	<code><![CDATA[
	
check <- function() {
  library(base)
  library(metadig)
  # varialbe defined by MQE from the <xpath> selectors.
  # "entityName" - the names of each data entity
  # "entityAttributesPresent" - the names of each data entity
  
  outputList <- list()
  # Assume that the check will succeed, until proven otherwise.
  # The dataset may have multiple entities, so check each one. All entities are checked
  # so mdqe can report to the user about all entities, not just the one that failed.
  if (length(entityName) > 0) {
    for(iEntity in 1:length(entityName)) {
      # Assume that the check will succeed, until proven otherwise.
      undefEls <- list()
      
      # Check entityName is defined for current entity
      if(isDefined("entityName", entityName, iEntity)) {
        undefEls[[length(undefEls)+1]] <- "name"
        thisEntityName <- sprintf("%d", iEntity)
      } else {
        thisEntityName <- sprintf("%s", entityName[[iEntity]])
      }

      if(isDefined("entityAttributesPresent", entityAttributesPresent, iEntity)) {
        undefEls[[length(undefEls)+1]] <- "attributes"
      }

      # Store output for this entity if it didn't pass a check. We will only report on entities that don't have
      # all the elements we are checking for.
      if(length(undefEls) > 0) {
        outputList[[length(outputList)+1]] <- list(value=sprintf("Entity %s is missing %s", thisEntityName, paste(unlist(undefEls), collapse=", ")))
      }
    }
  }
  
  if(length(outputList) > 0) {
    return(list(status="FAILURE", values=outputList))
  } else {
    return(list(status="SUCCESS", values=list(value=sprintf("All %d entities that require attributes have them.", length(entityName)))))
  }
}

result <- check()
mdq_result <- list(status=result$status, output=result$values) 
]]></code>

	<!-- Don't need a subSelector for entityName, as this element is required, 
		so their won't be entities that are selected that don't have this value, 
		and therefor no 'blank' values. -->
	<selector>
		<name>entityName</name>
		<xpath>/*[local-name() = 'eml']/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity]</xpath>
		<subSelector>
			<name>entityNameSubSelector</name>
			<xpath>./entityName</xpath>
		</subSelector>
	</selector>
	<selector>
		<name>entityAttributesPresent</name>
		<xpath>/*[local-name() = 'eml']/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity]</xpath>
		<subSelector>
			<name>entityAttributesSubSelector</name>
			<xpath>boolean(./attributeList/attribute)</xpath>
		</subSelector>
	</selector>
	<dialect>
		<name>eml</name>
		<xpath>boolean(/*[local-name() = 'eml'])</xpath>
	</dialect>
</mdq:check>
