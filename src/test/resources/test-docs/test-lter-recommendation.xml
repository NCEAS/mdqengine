<?xml version="1.0" encoding="UTF-8"?>
<recommendation>
   <check>
      <code><![CDATA[
import re

def call():
  # Check if the package identifier has the proper format, i.e. "scope.identifier.revision"

  # Set default message to be returned to MDQ
  message = "The package identifier is valid"
  # Set default status
  status = "valid"
  result = True
  message = "The package identifier is valid"
  pattern = re.compile("[a-zA-Z0-9_\-]+\.(\d+)\.(\d+)")
  m = pattern.match(packageId)

  if not m:
    result = False
    status = "error"
    message = "The packageId value should match the pattern 'scope.identifier.revision'"
    return(False)

  (scope, identifier, revision) = packageId.split(".")

  checkStr = re.sub("^0+", "", identifier)
  if (checkStr != identifier):
    result = False
    status = "error"
    message = "A leading zero was found in the identifier. The identifier value must be a whole number."
    return(result)

  checkStr = re.sub("^0+", "", revision)
  if (checkStr != revision):
    result = False
    message = "A leading zero was found in the revision. The revision value must be a whole number."
    status = "error"
    return(result)

  # All checks have passed 
  return result
      ]]></code>
      <environment>python</environment>
      <expected>true</expected>
      <id>check.1.1</id>      
      <level>WARN</level>
      <name>packageIdPattern</name>
      <selector>
         <name>packageId</name>
         <xpath>/eml/@packageId</xpath>
      </selector>
   </check>

   <check>
      <code><![CDATA[
def call():

  # Message is set when an error occurs.
  message = ""

  if(len(keywords) > 0):
    result = True
    status = "valid"
  else:
    result = False
    message = "Keywords are not present"
    status = "ERROR"
      
  return(result)
      ]]></code>
      <environment>python</environment>
      <expected>true</expected>
      <id>check.2.1</id>      
      <level>ERROR</level>
      <name>keywordPresent</name>
      <selector>
         <name>keywords</name>
         <xpath>/eml/dataset/keywordSet/keyword</xpath>
      </selector>
   </check>
   
      <check>
      <code><![CDATA[
def call():
  if(len(methods) > 0):
    result = True
    message = ""
    status = "valid"
  else:
    result = False
    message = "A <methods> element is not present"
    status = "warn"
      
  return(result)
      ]]></code>
      <environment>python</environment>
      <expected>true</expected>
      <id>check.3.1</id>
      <level>WARN</level>
      <name>methodsElementPresent</name>
      <selector>
         <name>methods</name>
         <xpath>/eml/dataset/methods</xpath>
      </selector>
   </check>

   <check>
      <id>check.4.1</id>
      <name>coveragePresent</name>
      <level>WARN</level>
      <environment>python</environment>
      <expected>true</expected>
      <selector>
         <name>coverages</name>
         <xpath>/eml/dataset/coverage/geographicCoverage | /eml/dataset/coverage/temporalCoverage | /eml/dataset/coverage/taxonomicCoverage</xpath>
      </selector>
      <code><![CDATA[
def call():

  message = ""
  # Check if the mdq set our xpath result 
  if 'coverages' not in globals():
    result = False
    message = "A <coverage> element is not present"
    status = "valid"
  elif(len(coverages) > 0):
    result = True
    status = "valid"
  else:
    result = False
    message = "A <coverage> element is not present"
    status = "warn"
      
  return(result)
      ]]></code>
   </check>

   <id>test-lter-recommendation.1.1</id>      
   <name>mdqengine provisional test suite for LTER</name>
</recommendation>