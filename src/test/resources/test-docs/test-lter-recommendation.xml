<?xml version="1.0" encoding="UTF-8"?>

<recommendation>
	<id>test-lter-recommendation.1.1</id>
	<name>mdqengine provisional test suite for LTER</name>
	<check>
		<id>check.1.1</id>
		<name>packageIdPattern</name>
		<environment>python</environment>
		<dialect>
		  <name>eml</name>
		  <xpath>boolean(/*[local-name() = 'eml'])</xpath>
		</dialect>
		<expected>true</expected>
		<level>WARN</level>
		<selector>
			<name>packageId</name>
			<xpath>/eml/@packageId</xpath>
		</selector>
		<code><![CDATA[
def call():

  import re
  global message
  global status
  
  # Check if the package identifier has the proper format, i.e. "scope.identifier.revision"
  pattern = re.compile("[a-zA-Z0-9_\-]+\.(\d+)\.(\d+)")
  m = pattern.match(packageId)

  if not m:
    status = "FAILURE"
    message = "The packageId value should match the pattern 'scope.identifier.revision'"
    return(False)

  (scope, identifier, revision) = packageId.split(".")

  checkStr = re.sub("^0+", "", identifier)
  if (checkStr != identifier):
    status = "FAILURE"
    message = "A leading zero was found in the identifier. The identifier value must be a whole number."
    return(False)

  checkStr = re.sub("^0+", "", revision)
  if (checkStr != revision):
    message = "A leading zero was found in the revision. The revision value must be a whole number."
    status = "FAILURE"
    return(False)

  # All checks have passed 
  status = "SUCCESS"
  message = "The package identifier is valid"
  return True
      ]]></code>
	</check>

	<check>
		<id>check.2.1</id>
		<name>keywordPresent</name>
		<environment>python</environment>
		<dialect>
		  <name>eml</name>
		  <xpath>boolean(/*[local-name() = 'eml'])</xpath>
		</dialect>
		<expected>true</expected>
		<level>ERROR</level>
		<selector>
			<name>keywords</name>
			<xpath>/eml/dataset/keywordSet/keyword</xpath>
		</selector>
		<code><![CDATA[
def call():
  global message
  global status

  # Message is set when an error occurs.
  message = "Keywords are not present"

  if(len(keywords) > 0):
    status = "SUCCESS"
    return True

  status = "FAILURE"
  message = "Keywords are not present"
  return False
      
      ]]></code>
	</check>


	<check>
		<id>check.3.1</id>
		<name>methodsElementPresent</name>
		<environment>python</environment>
		<dialect>
		  <name>eml</name>
		  <xpath>boolean(/*[local-name() = 'eml'])</xpath>
		</dialect>
		<expected>true</expected>
		<level>WARN</level>
		<selector>
			<name>methods</name>
			<xpath>/eml/dataset/methods</xpath>
		</selector>
		<code><![CDATA[
def call():
  global message
  global status

  if(len(methods) > 0):
    status = "SUCCESS"
    result = True
    message = "A methods element is present"
  else:
    status = "FAILURE"
    result = False
    message = "A methods element is not present"
      
  return(result)
      ]]></code>
	</check>

	<check>
		<id>check.4.1</id>
		<name>coveragePresent</name>
		<environment>python</environment>
		<dialect>
		  <name>eml</name>
		  <xpath>boolean(/*[local-name() = 'eml'])</xpath>
		</dialect>
		<level>WARN</level>
		<expected>true</expected>
		<selector>
			<name>coverages</name>
			<xpath>/eml/dataset/coverage/geographicCoverage |
				/eml/dataset/coverage/temporalCoverage |
				/eml/dataset/coverage/taxonomicCoverage
			</xpath>
		</selector>
		<code><![CDATA[
def call():
  global message
  global status
  status = "ERROR"
  
  # Check if the mdq set our xpath result 
  if 'coverages' not in globals():
    result = False
    message = "A coverage element is not present"
    status = "SUCCESS"
  elif(len(coverages) > 0):
    result = True
    status = "SUCCESS"
  else:
    result = False
    message = "A coverage element is not present"
    status = "FAILURE"
      
  return(result)
      ]]></code>
	</check>
</recommendation>